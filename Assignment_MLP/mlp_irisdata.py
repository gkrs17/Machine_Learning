# -*- coding: utf-8 -*-
"""MLP_IRISdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmT2SVsvJypAnpsqOmDNSIql9fpoxvoa
"""

import pandas as pd
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'Class']

# Read dataset to pandas dataframe
irisdata = pd.read_csv("../input/iris-flower-dataset/IRIS.csv", names=names)

irisdata.head()

# dropping the first row since its same as column labels
irisdata=irisdata.drop([0])
irisdata.head()

# Assign data from first four columns to X variable
X = irisdata.iloc[:, 0:4]
X.head()

# Assign data from fifth column to y variable
y = irisdata['Class']
y.head()

y.unique()

# label encoding
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
y = le.fit_transform(y)
print(y)

#splitting the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)

# Scaling the data as per normal distribution
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

#defining the MLP classifier and its parameters
from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(activation='relu',hidden_layer_sizes=(8, 5), max_iter=1000,random_state=42,epsilon=0.00001)
mlp.fit(X_train, y_train)

predictions = mlp.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))

# printing hyperparameters
print("Activation function :",mlp.activation)
print("Learning Rate :",mlp.epsilon)
print("Epochs :",mlp.max_iter)
print("Model Weights :",mlp.coefs_)